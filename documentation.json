{
    "pipes": [],
    "interfaces": [
        {
            "name": "BaseLogInResponse",
            "id": "interface-BaseLogInResponse-c7a78445b0649360a786e24e6c13e29b",
            "file": "src/app/shared/services/auth.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from '../types/user.type';\n\nexport interface BaseLogInResponse {\n  success: boolean;\n}\n\nexport interface LogInSuccessResponse {\n  success: true;\n  data: User;\n}\n\nexport interface LogInErrorResponse {\n  success: false;\n  errors: string[];\n}\n\nexport type LogInResponse = LogInSuccessResponse | LogInErrorResponse;\n",
            "properties": [
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Clappable",
            "id": "interface-Clappable-0fee02e74972268319bd851e27b9a906",
            "file": "src/app/shared/mixins/clappable.mixin.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Constructor } from './constructor.type';\nimport {\n  EventEmitter,\n  Output,\n  Input,\n  Injectable,\n  Directive,\n} from '@angular/core';\nimport { HasEntityId } from './has-entity-id.type';\n\nexport interface Clappable {\n  claps: number;\n\n  isClapped: boolean;\n\n  clap: EventEmitter<string>;\n}\n\nexport type ClappableConstructor = Constructor<Clappable>;\n\nexport function mixinClappable<T extends Constructor<HasEntityId>>(\n  base: T\n): ClappableConstructor & T {\n  @Directive()\n  class BaseClappableClass extends base implements Clappable {\n    @Input()\n    isClapped!: boolean;\n\n    @Input()\n    claps!: number;\n\n    @Output()\n    clap = new EventEmitter<string>();\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  }\n\n  return BaseClappableClass;\n}\n",
            "properties": [
                {
                    "name": "clap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "claps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isClapped",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ComponentConfig",
            "id": "interface-ComponentConfig-1de2ddfec4b60b416aa62a1cf9a34906",
            "file": "src/app/shared/components/configurable/configuration.const.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport interface ComponentConfig {\n  color: string;\n  backgroundColor: string;\n  borderRadius: string;\n}\n\nexport const CONFIG_TOKEN = new InjectionToken<ComponentConfig>(\n  'component_config'\n);\n\nexport const DEFAULT_CONFIG: ComponentConfig = {\n  color: 'red',\n  backgroundColor: 'black',\n  borderRadius: '1rem',\n};\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "HasEntityId",
            "id": "interface-HasEntityId-608dd60287d0196ec6ccc7ebe02b60d8",
            "file": "src/app/shared/mixins/has-entity-id.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HasEntityId {\n  entityId: string;\n}\n",
            "properties": [
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Likeable",
            "id": "interface-Likeable-6f480942a75b7cfcf947f26703cfd5d5",
            "file": "src/app/shared/mixins/likeable.mixin.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Constructor } from './constructor.type';\nimport {\n  EventEmitter,\n  Output,\n  Input,\n  Injectable,\n  Directive,\n} from '@angular/core';\nimport { HasEntityId } from './has-entity-id.type';\n\nexport interface Likeable {\n  isLiked: boolean;\n\n  likes: number;\n\n  like: EventEmitter<string>;\n\n  unlike: EventEmitter<string>;\n\n  toggleLike(): void;\n}\n\nexport type LikeableConstructor = Constructor<Likeable>;\n\nexport function mixinLikeable<T extends Constructor<HasEntityId>>(\n  base: T\n): LikeableConstructor & T {\n  @Directive()\n  class BaseLikeableClass extends base implements Likeable {\n    @Input()\n    isLiked!: boolean;\n\n    @Input()\n    likes!: number;\n\n    @Output()\n    like = new EventEmitter<string>();\n\n    @Output()\n    unlike = new EventEmitter<string>();\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    toggleLike(): void {\n      if (this.isLiked) {\n        this.unlike.emit(this.entityId);\n      } else {\n        this.like.emit(this.entityId);\n      }\n    }\n  }\n\n  return BaseLikeableClass;\n}\n",
            "properties": [
                {
                    "name": "isLiked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "like",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "likes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "unlike",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "toggleLike",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "LogInErrorResponse",
            "id": "interface-LogInErrorResponse-c7a78445b0649360a786e24e6c13e29b",
            "file": "src/app/shared/services/auth.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from '../types/user.type';\n\nexport interface BaseLogInResponse {\n  success: boolean;\n}\n\nexport interface LogInSuccessResponse {\n  success: true;\n  data: User;\n}\n\nexport interface LogInErrorResponse {\n  success: false;\n  errors: string[];\n}\n\nexport type LogInResponse = LogInSuccessResponse | LogInErrorResponse;\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LoginForm",
            "id": "interface-LoginForm-9d423c7c649ec9a082a10e815b180f75",
            "file": "src/app/features/login/components/login-form/login-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nexport interface LoginForm {\n  email: string;\n  password: string;\n}\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginFormComponent {\n  form: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  });\n\n  @Input() submitting = false;\n\n  @Input() errors: string[] = [];\n\n  @Output() logIn = new EventEmitter<LoginForm>();\n\n  onLogIn(): void {\n    if (this.form.valid) {\n      this.logIn.emit(this.form.value);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LogInInput",
            "id": "interface-LogInInput-508cd1c9e76d7288835c3b32cfc71a27",
            "file": "src/app/shared/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\nimport { User } from '../types/user.type';\nimport { LogInResponse } from './auth.types';\nimport { UserService } from './user.service';\n\nexport interface LogInInput {\n  email: string;\n  password: string;\n}\n\nexport const accounts: Record<string, User> = {\n  'alan.sa@mjv.com.br': {\n    email: 'alan.sa@mjv.com.br',\n    name: 'Alan Jhonnes',\n    dashboardSetting: ['progress', 'progress', 'table'],\n  },\n  'nathan.carlos@mjv.com.br': {\n    email: 'nathan.carlos@mjv.com.br',\n    name: 'Nathan Carlos',\n    dashboardSetting: ['table', 'table', 'progress'],\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private userService: UserService) {}\n\n  logIn(login: LogInInput): Observable<LogInResponse> {\n    const user = accounts[login.email];\n    const response: LogInResponse = user\n      ? {\n          success: true,\n          data: user,\n        }\n      : {\n          success: false,\n          errors: ['Usuário não encontrado.'],\n        };\n    return of(response).pipe(\n      delay(2000),\n      tap((response) => {\n        // if log in is successful, sets current user\n        if (response.success) {\n          this.userService.setCurrentUser(response.data);\n        }\n      })\n    );\n  }\n\n  logOut() {\n    this.userService.setCurrentUser(null);\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LogInSuccessResponse",
            "id": "interface-LogInSuccessResponse-c7a78445b0649360a786e24e6c13e29b",
            "file": "src/app/shared/services/auth.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from '../types/user.type';\n\nexport interface BaseLogInResponse {\n  success: boolean;\n}\n\nexport interface LogInSuccessResponse {\n  success: true;\n  data: User;\n}\n\nexport interface LogInErrorResponse {\n  success: false;\n  errors: string[];\n}\n\nexport type LogInResponse = LogInSuccessResponse | LogInErrorResponse;\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Node",
            "id": "interface-Node-ced4884a9e85895ec1af536dd5c5e541",
            "file": "src/app/shared/components/recursive/recursive.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n} from '@angular/core';\n\nexport interface Node {\n  id: string;\n  children: Node[];\n}\n\n@Component({\n  selector: 'app-recursive',\n  templateUrl: './recursive.component.html',\n  styleUrls: ['./recursive.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecursiveComponent {\n  @Input()\n  node!: Node;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ProgressData",
            "id": "interface-ProgressData-651d8f84cfa91f66e0c67894175694a1",
            "file": "src/app/shared/services/reports.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nexport const tableData: TableData[] = [\n  {\n    bool: true,\n    name: 'Alan',\n    rating: 5,\n  },\n  {\n    bool: true,\n    name: 'Nathan',\n    rating: 6,\n  },\n  {\n    bool: true,\n    name: 'Carlos',\n    rating: 7,\n  },\n];\n\nexport interface TableData {\n  name: string;\n  rating: number;\n  bool: boolean;\n}\n\nexport interface ProgressData {\n  primary: number;\n  secondary: number;\n}\n\nexport const progressData: ProgressData = {\n  primary: 100,\n  secondary: 50,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReportsService {\n  getTableData(): Observable<TableData[]> {\n    return of(tableData).pipe(delay(2000));\n  }\n\n  getProgressData(): Observable<ProgressData> {\n    return of(progressData).pipe(delay(2000));\n  }\n}\n",
            "properties": [
                {
                    "name": "primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "secondary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TableData",
            "id": "interface-TableData-651d8f84cfa91f66e0c67894175694a1",
            "file": "src/app/shared/services/reports.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nexport const tableData: TableData[] = [\n  {\n    bool: true,\n    name: 'Alan',\n    rating: 5,\n  },\n  {\n    bool: true,\n    name: 'Nathan',\n    rating: 6,\n  },\n  {\n    bool: true,\n    name: 'Carlos',\n    rating: 7,\n  },\n];\n\nexport interface TableData {\n  name: string;\n  rating: number;\n  bool: boolean;\n}\n\nexport interface ProgressData {\n  primary: number;\n  secondary: number;\n}\n\nexport const progressData: ProgressData = {\n  primary: 100,\n  secondary: 50,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReportsService {\n  getTableData(): Observable<TableData[]> {\n    return of(tableData).pipe(delay(2000));\n  }\n\n  getProgressData(): Observable<ProgressData> {\n    return of(progressData).pipe(delay(2000));\n  }\n}\n",
            "properties": [
                {
                    "name": "bool",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TemplateContext",
            "id": "interface-TemplateContext-f5da68820cab094ab56bd98ac0e49bc5",
            "file": "src/app/shared/components/custom-template/custom-template.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  TemplateRef,\n} from '@angular/core';\n\nexport interface TemplateContext {\n  $implicit: string;\n  title: string;\n  subtitle: string;\n}\n\n@Component({\n  selector: 'app-custom-template',\n  templateUrl: './custom-template.component.html',\n  styleUrls: ['./custom-template.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomTemplateComponent {\n  @Input()\n  title!: string;\n\n  @Input()\n  subtitle!: string;\n\n  @Input()\n  template: TemplateRef<TemplateContext> | null = null;\n}\n",
            "properties": [
                {
                    "name": "$implicit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-1c2a017e39f6ccefd9b48877f7b62839",
            "file": "src/app/shared/types/user.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  email: string;\n  name: string;\n  dashboardSetting: WidgetTypes[];\n}\n\nexport type WidgetTypes = 'table' | 'progress';\n",
            "properties": [
                {
                    "name": "dashboardSetting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WidgetTypes[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-508cd1c9e76d7288835c3b32cfc71a27",
            "file": "src/app/shared/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "login",
                            "type": "LogInInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LogInResponse>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "LogInInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\nimport { User } from '../types/user.type';\nimport { LogInResponse } from './auth.types';\nimport { UserService } from './user.service';\n\nexport interface LogInInput {\n  email: string;\n  password: string;\n}\n\nexport const accounts: Record<string, User> = {\n  'alan.sa@mjv.com.br': {\n    email: 'alan.sa@mjv.com.br',\n    name: 'Alan Jhonnes',\n    dashboardSetting: ['progress', 'progress', 'table'],\n  },\n  'nathan.carlos@mjv.com.br': {\n    email: 'nathan.carlos@mjv.com.br',\n    name: 'Nathan Carlos',\n    dashboardSetting: ['table', 'table', 'progress'],\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private userService: UserService) {}\n\n  logIn(login: LogInInput): Observable<LogInResponse> {\n    const user = accounts[login.email];\n    const response: LogInResponse = user\n      ? {\n          success: true,\n          data: user,\n        }\n      : {\n          success: false,\n          errors: ['Usuário não encontrado.'],\n        };\n    return of(response).pipe(\n      delay(2000),\n      tap((response) => {\n        // if log in is successful, sets current user\n        if (response.success) {\n          this.userService.setCurrentUser(response.data);\n        }\n      })\n    );\n  }\n\n  logOut() {\n    this.userService.setCurrentUser(null);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReportsService",
            "id": "injectable-ReportsService-651d8f84cfa91f66e0c67894175694a1",
            "file": "src/app/shared/services/reports.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getProgressData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ProgressData>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTableData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TableData[]>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nexport const tableData: TableData[] = [\n  {\n    bool: true,\n    name: 'Alan',\n    rating: 5,\n  },\n  {\n    bool: true,\n    name: 'Nathan',\n    rating: 6,\n  },\n  {\n    bool: true,\n    name: 'Carlos',\n    rating: 7,\n  },\n];\n\nexport interface TableData {\n  name: string;\n  rating: number;\n  bool: boolean;\n}\n\nexport interface ProgressData {\n  primary: number;\n  secondary: number;\n}\n\nexport const progressData: ProgressData = {\n  primary: 100,\n  secondary: 50,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReportsService {\n  getTableData(): Observable<TableData[]> {\n    return of(tableData).pipe(delay(2000));\n  }\n\n  getProgressData(): Observable<ProgressData> {\n    return of(progressData).pipe(delay(2000));\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-5d7ceaa84abb55dcfa19fb000be621c6",
            "file": "src/app/shared/services/user.service.ts",
            "properties": [
                {
                    "name": "currentUserSubject",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "User | null",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUserStream",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User | null>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../types/user.type';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  readonly currentUserSubject = new BehaviorSubject<User | null>(null);\n\n  setCurrentUser(user: User | null): void {\n    this.currentUserSubject.next(user);\n  }\n\n  getCurrentUserStream(): Observable<User | null> {\n    return this.currentUserSubject.asObservable();\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.getValue();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "WidgetService",
            "id": "injectable-WidgetService-c2c8da6cd9e9ec5fcf712ebdf4beac52",
            "file": "src/app/features/dashboard/services/widget.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getWidgetType",
                    "args": [
                        {
                            "name": "widget",
                            "type": "WidgetTypes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Constructor<WidgetType>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "widget",
                            "type": "WidgetTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Constructor } from 'src/app/shared/mixins/constructor.type';\nimport { WidgetTypes } from 'src/app/shared/types/user.type';\nimport { ProgressReportComponent } from '../components/progress-report/progress-report.component';\nimport { TableReportComponent } from '../components/table-report/table-report.component';\nimport { WidgetType } from '../widget.type';\n\nexport const widgetTypeToWidgetComponent: Record<\n  WidgetTypes,\n  Constructor<WidgetType>\n> = {\n  progress: ProgressReportComponent,\n  table: TableReportComponent,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WidgetService {\n  getWidgetType(widget: WidgetTypes): Constructor<WidgetType> {\n    return widgetTypeToWidgetComponent[widget];\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuardService",
            "id": "injectable-AuthGuardService-ac46aab193c650e45d772bb210a67768",
            "file": "src/app/shared/guard/auth-guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | UrlTree | Observable | Promise",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuardService implements CanActivate {\n  constructor(private userService: UserService, private router: Router) {}\n\n  canActivate():\n    | boolean\n    | UrlTree\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree> {\n    const user = this.userService.getCurrentUser();\n    if (user) {\n      return true;\n    }\n    return this.router.createUrlTree(['/login']);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "ContentTriggerDirective",
            "id": "directive-ContentTriggerDirective-3efba65131320020b8ff5b4294ea83bf",
            "file": "src/app/shared/components/content-trigger/content-trigger.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\nimport { ContentTriggerComponent } from './content-trigger.component';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: '[app-content-trigger]',\n})\nexport class ContentTriggerDirective<T = any> {\n  @Input()\n  customData: T | undefined = undefined;\n\n  @HostListener('click')\n  onClick(): void {\n    this.parent.triggerSomeEvent(this.customData);\n  }\n\n  constructor(private parent: ContentTriggerComponent) {\n    console.log('trigger');\n  }\n}\n",
            "selector": "[app-content-trigger]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "customData",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "T | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parent",
                        "type": "ContentTriggerComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "parent",
                        "type": "ContentTriggerComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PostComponentBase",
            "id": "directive-PostComponentBase-d6c58d823c8bd8e174ce6700b80dfb09",
            "file": "src/app/shared/components/post/post.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Directive,\n} from '@angular/core';\nimport { mixinLikeable } from '../../mixins/likeable.mixin';\nimport { HasEntityId } from '../../mixins/has-entity-id.type';\nimport { mixinClappable } from '../../mixins/clappable.mixin';\n\n@Directive()\nclass PostComponentBase implements HasEntityId {\n  @Input()\n  entityId!: string;\n}\n\nconst MixedBasePostComponent = mixinClappable(mixinLikeable(PostComponentBase));\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PostComponent extends MixedBasePostComponent {\n  @Input()\n  content!: string;\n\n  constructor() {\n    super();\n  }\n}\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "implements": [
                "HasEntityId"
            ]
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b099a8c06607b8233613d05a824fb590",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'devschool-arquitetura-angular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'devschool-arquitetura-angular';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 0;\n  align-items: center;\n  width: 100%;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConfigurableComponent",
            "id": "component-ConfigurableComponent-ce443c7d06e0ebccbe33d3063c1f7c89",
            "file": "src/app/shared/components/configurable/configurable/configurable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-configurable",
            "styleUrls": [
                "./configurable.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./configurable.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.backgroundColor'"
                        }
                    ]
                },
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.borderRadius'"
                        }
                    ]
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.color'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "style.borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "style.color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  HostBinding,\n} from '@angular/core';\nimport { ComponentConfig, CONFIG_TOKEN } from '../configuration.const';\n\n@Component({\n  selector: 'app-configurable',\n  templateUrl: './configurable.component.html',\n  styleUrls: ['./configurable.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfigurableComponent {\n  @HostBinding('style.color')\n  color: string;\n\n  @HostBinding('style.borderRadius')\n  borderRadius: string;\n\n  @HostBinding('style.backgroundColor')\n  backgroundColor: string;\n\n  constructor(@Inject(CONFIG_TOKEN) private config: ComponentConfig) {\n    this.color = config.color;\n    this.backgroundColor = config.backgroundColor;\n    this.borderRadius = config.borderRadius;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./configurable.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ComponentConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ComponentConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div>configurable works!</div>\n"
        },
        {
            "name": "ContentTriggerComponent",
            "id": "component-ContentTriggerComponent-be8cc8e0b17293f208438fe0ffd1f6bc",
            "file": "src/app/shared/components/content-trigger/content-trigger.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-content-trigger",
            "styleUrls": [
                "./content-trigger.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./content-trigger.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "triggerDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentTriggerComponent",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ContentTriggerDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "triggerSomeEvent",
                    "args": [
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ViewChild,\n} from '@angular/core';\nimport { ContentTriggerDirective } from './content-trigger.directive';\n\n@Component({\n  selector: 'app-content-trigger',\n  templateUrl: './content-trigger.component.html',\n  styleUrls: ['./content-trigger.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContentTriggerComponent<T = any> {\n  @ViewChild(ContentTriggerDirective)\n  triggerDirective?: ContentTriggerComponent;\n\n  triggerSomeEvent(data: T): void {\n    console.log('triggered: ', data);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./content-trigger.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n\n<button apl-content-trigger [customData]=\"{ test: 'abc' }\">Outro trigger</button>\n"
        },
        {
            "name": "CustomTemplateComponent",
            "id": "component-CustomTemplateComponent-f5da68820cab094ab56bd98ac0e49bc5",
            "file": "src/app/shared/components/custom-template/custom-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-custom-template",
            "styleUrls": [
                "./custom-template.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-template.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "template",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "TemplateRef<TemplateContext> | null"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  TemplateRef,\n} from '@angular/core';\n\nexport interface TemplateContext {\n  $implicit: string;\n  title: string;\n  subtitle: string;\n}\n\n@Component({\n  selector: 'app-custom-template',\n  templateUrl: './custom-template.component.html',\n  styleUrls: ['./custom-template.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomTemplateComponent {\n  @Input()\n  title!: string;\n\n  @Input()\n  subtitle!: string;\n\n  @Input()\n  template: TemplateRef<TemplateContext> | null = null;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./custom-template.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngTemplateOutlet=\"template || defaultTemplate;\ncontext: {\n  title: title,\n  subtitle: subtitle,\n  $implicit: title\n}\"></ng-container>\n\n\n<ng-template #defaultTemplate\n             let-default\n             let-title=\"title\"\n             let-subtitle=\"subtitle\">\n  <h1>{{title}}</h1>\n  <div>{{subtitle}}</div>\n\n  <div>{{default}}</div>\n</ng-template>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-3e79b907931bdc36f8a63417b54a3949",
            "file": "src/app/features/dashboard/pages/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ComponentFactoryResolver,\n  Injector,\n  OnDestroy,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { delay, takeUntil } from 'rxjs/operators';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { WidgetService } from '../../services/widget.service';\n\n@Component({\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnDestroy, AfterViewInit {\n  @ViewChild('container', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  destroy$ = new Subject<void>();\n\n  constructor(\n    private userService: UserService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    private widgetService: WidgetService,\n    private router: Router\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.userService\n      .getCurrentUserStream()\n      .pipe(delay(1), takeUntil(this.destroy$))\n      .subscribe((user) => {\n        if (!user) {\n          this.router.navigateByUrl('/login');\n        } else {\n          const widgets = user.dashboardSetting.map((widget) =>\n            this.widgetService.getWidgetType(widget)\n          );\n          widgets.forEach((widget) => {\n            const componentFactory =\n              this.componentFactoryResolver.resolveComponentFactory(widget);\n            this.container.createComponent(componentFactory);\n          });\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  flex-grow: 1;\n  width: 100%;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "widgetService",
                        "type": "WidgetService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "widgetService",
                        "type": "WidgetService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"container-fluid d-flex align-items-center flex-wrap\">\n  <ng-container #container></ng-container>\n</div>\n"
        },
        {
            "name": "DynamicComponent",
            "id": "component-DynamicComponent-2e31473d62531caf75062b6987508ff4",
            "file": "src/app/shared/components/dynamic/dynamic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic",
            "styleUrls": [
                "./dynamic.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ViewContainerRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ViewChild,\n  Injector,\n} from '@angular/core';\nimport { PureComponentComponent } from '../pure-component/pure-component.component';\n\n@Component({\n  selector: 'app-dynamic',\n  templateUrl: './dynamic.component.html',\n  styleUrls: ['./dynamic.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DynamicComponent {\n  @ViewChild('container', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    private injector: Injector\n  ) {}\n\n  addComponent(): void {\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      PureComponentComponent\n    );\n    // const componentRef = factory.create(this.injector);\n    // const instance = componentRef.instance;\n    // instance.open = Math.random() >= 0.5;\n    // instance.count = Math.floor(Math.random() * 1000);\n    // this.container.insert(componentRef.hostView);\n    this.container.createComponent(factory, undefined, this.injector);\n    // this.viewContainerRef.insert(componentRef.hostView);\n    // this.viewContainerRef.createComponent(factory, undefined, this.injector);\n  }\n\n  removeComponent(): void {\n    this.container.remove();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n\n.container {\n  background-color: aqua;\n}\n",
                    "styleUrl": "./dynamic.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button (click)=\"addComponent()\">ADD COMPONENT</button>\n<button (click)=\"removeComponent()\">REMOVE COMPONENT</button>\n<div class=\"container\">\n  <ng-container #container></ng-container>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-154b396ff56613f320b6be5801bcef7a",
            "file": "src/app/features/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/shared/services/auth.service';\n\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss'],\n})\nexport class LayoutComponent {\n  constructor(private authService: AuthService) {}\n\n  logOut(): void {\n    this.authService.logOut();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 0;\n  align-items: center;\n  width: 100%;\n}\n",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\n<div  class=\"w-100\">\n  <button mat-raised-button (click)=\"logOut()\"> Log Out</button>\n</div>\n\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-9d423c7c649ec9a082a10e815b180f75",
            "file": "src/app/features/login/components/login-form/login-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [
                "./login-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string[]"
                },
                {
                    "name": "submitting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "logIn",
                    "defaultValue": "new EventEmitter<LoginForm>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "onLogIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nexport interface LoginForm {\n  email: string;\n  password: string;\n}\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginFormComponent {\n  form: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  });\n\n  @Input() submitting = false;\n\n  @Input() errors: string[] = [];\n\n  @Output() logIn = new EventEmitter<LoginForm>();\n\n  onLogIn(): void {\n    if (this.form.valid) {\n      this.logIn.emit(this.form.value);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-form.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<form [formGroup]=\"form\" class=\"container-fluid\" (submit)=\"onLogIn()\">\n  <div class=\"row\">\n    <mat-form-field class=\"col-6\">\n      <mat-label>Email</mat-label>\n      <input matInput placeholder=\"you@domain.com\" formControlName=\"email\" />\n    </mat-form-field>\n\n    <mat-form-field class=\"col-6\">\n      <mat-label>Senha</mat-label>\n      <input matInput placeholder=\"12345678\" formControlName=\"password\" />\n    </mat-form-field>\n  </div>\n\n  <div>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      type=\"submit\"\n      class=\"w-100 d-flex align-items-center justify-content-center p-2\"\n      [disabled]=\"submitting\"\n    >\n      <ng-container *ngIf=\"!submitting; else submittingTemplate\">\n        Log In\n      </ng-container>\n    </button>\n  </div>\n\n  <ul *ngIf=\"errors.length\">\n    <li *ngFor=\"let error of errors\">\n      {{error}}\n    </li>\n  </ul>\n</form>\n\n<ng-template #submittingTemplate>\n  <mat-spinner mode=\"indeterminate\" class=\"button-spinner\"></mat-spinner>\n</ng-template>\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-6362739eb7e096d1eba78e737ea53d11",
            "file": "src/app/features/login/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "submitting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "onLogIn",
                    "args": [
                        {
                            "name": "form",
                            "type": "LoginForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "LoginForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { finalize } from 'rxjs/operators';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { LoginForm } from '../../components/login-form/login-form.component';\n\n@Component({\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss'],\n})\nexport class LoginPageComponent {\n  submitting = false;\n  errors: string[] = [];\n\n  constructor(\n    private authService: AuthService,\n    private dialogService: MatDialog,\n    private router: Router\n  ) {}\n\n  onLogIn(form: LoginForm): void {\n    console.log('login');\n    this.submitting = true;\n    this.authService\n      .logIn(form)\n      .pipe(\n        finalize(() => {\n          this.submitting = false;\n        })\n      )\n      .subscribe({\n        next: (response) => {\n          if (response.success) {\n            this.errors = [];\n            this.router.navigateByUrl('/');\n          } else {\n            this.errors = response.errors;\n          }\n        },\n        error: () => {\n          this.errors = ['Erro ao fazer a requisição, tente novamente'];\n        },\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n}\n",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-login-form\n  (logIn)=\"onLogIn($event)\"\n  [submitting]=\"submitting\"\n  [errors]=\"errors\"\n></app-login-form>\n"
        },
        {
            "name": "NgContentSelectComponent",
            "id": "component-NgContentSelectComponent-f331721a1eb7450ceb77ca4db113d535",
            "file": "src/app/shared/components/ng-content-select/ng-content-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ng-content-select",
            "styleUrls": [
                "./ng-content-select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"top-left\">\n  <ng-content select=\"[top-left]\"></ng-content>\n</div>\n<div class=\"top-right\">\n  <ng-content select=\"[top-right]\"></ng-content>\n</div>\n<div class=\"bottom-left\">\n  <ng-content select=\"[bottom-left]\"></ng-content>\n</div>\n<div class=\"bottom-right\">\n  <ng-content select=\"[bottom-right]\"></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-ng-content-select',\n  template: `\n    <div class=\"top-left\">\n      <ng-content select=\"[top-left]\"></ng-content>\n    </div>\n    <div class=\"top-right\">\n      <ng-content select=\"[top-right]\"></ng-content>\n    </div>\n    <div class=\"bottom-left\">\n      <ng-content select=\"[bottom-left]\"></ng-content>\n    </div>\n    <div class=\"bottom-right\">\n      <ng-content select=\"[bottom-right]\"></ng-content>\n    </div>\n  `,\n  styleUrls: ['./ng-content-select.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgContentSelectComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100vh;\n}\n\n.top-left {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.top-right {\n  position: absolute;\n  top: 0;\n  right: 100%;\n  margin-right: -100%;\n}\n\n.bottom-left {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n}\n\n.bottom-right {\n  position: absolute;\n  bottom: 0;\n  right: 100%;\n  margin-right: -100%;\n}\n",
                    "styleUrl": "./ng-content-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NgContentSimpleComponent",
            "id": "component-NgContentSimpleComponent-bb4c0c761bce30a1e9b639b0c43a75cd",
            "file": "src/app/shared/components/ng-content-simple/ng-content-simple.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ng-content-simple",
            "styleUrls": [
                "./ng-content-simple.component.scss"
            ],
            "styles": [],
            "template": "<div>ng-content-simple works!</div>\n<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-ng-content-simple',\n  template: `\n    <div>ng-content-simple works!</div>\n    <ng-content></ng-content>\n  `,\n  styleUrls: ['./ng-content-simple.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgContentSimpleComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./ng-content-simple.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-124b738c15df82a22c3ccee94260d46c",
            "file": "src/app/features/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.scss'],\n})\nexport class NotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./not-found.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>Página não encontrada!</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PostComponent",
            "id": "component-PostComponent-d6c58d823c8bd8e174ce6700b80dfb09",
            "file": "src/app/shared/components/post/post.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post",
            "styleUrls": [
                "./post.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Directive,\n} from '@angular/core';\nimport { mixinLikeable } from '../../mixins/likeable.mixin';\nimport { HasEntityId } from '../../mixins/has-entity-id.type';\nimport { mixinClappable } from '../../mixins/clappable.mixin';\n\n@Directive()\nclass PostComponentBase implements HasEntityId {\n  @Input()\n  entityId!: string;\n}\n\nconst MixedBasePostComponent = mixinClappable(mixinLikeable(PostComponentBase));\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PostComponent extends MixedBasePostComponent {\n  @Input()\n  content!: string;\n\n  constructor() {\n    super();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./post.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "extends": "MixedBasePostComponent",
            "templateData": "<div>{{content}}</div>\n<div>Likes: {{likes}}</div>\n<div>Claps: {{claps}}</div>\n<div>Is Liked: {{isLiked}}</div>\n<div>Is Clapped: {{isClapped}}</div>\n<button (click)=\"toggleLike()\">{{ isLiked ? 'UNLIKE' : 'LIKE'}}</button>\n\n<button (click)=\"clap.emit(entityId)\"\n        [disabled]=\"isClapped\">CLAP</button>\n"
        },
        {
            "name": "ProgressReportComponent",
            "id": "component-ProgressReportComponent-530952acbe2502d382e5c2c82d9ba35f",
            "file": "src/app/features/dashboard/components/progress-report/progress-report.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-report",
            "styleUrls": [
                "./progress-report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "values",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressData | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n} from '@angular/core';\nimport { finalize } from 'rxjs/operators';\nimport {\n  ProgressData,\n  ReportsService,\n} from 'src/app/shared/services/reports.service';\n\n@Component({\n  selector: 'app-progress-report',\n  templateUrl: './progress-report.component.html',\n  styleUrls: ['./progress-report.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgressReportComponent implements OnInit {\n  loading = false;\n  values: ProgressData | null = null;\n\n  constructor(\n    private reportsService: ReportsService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.reportsService\n      .getProgressData()\n      .pipe(\n        finalize(() => {\n          this.loading = false;\n        })\n      )\n      .subscribe({\n        next: (values) => {\n          this.values = values;\n          this.changeDetectorRef.markForCheck();\n        },\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  width: 200px;\n  border: 1px solid black;\n  padding: 15px;\n}\n\n.bar {\n  height: 30px;\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./progress-report.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reportsService",
                        "type": "ReportsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "reportsService",
                        "type": "ReportsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<ng-container *ngIf=\"!loading && values; else loadingTemplate\">\n  <h1>Progressos</h1>\n  <div class=\"bar\">\n    <mat-progress-bar mode=\"determinate\" [value]=\"values.primary\" color=\"primary\"></mat-progress-bar>\n  </div>\n  <div class=\"bar\">\n    <mat-progress-bar mode=\"determinate\" [value]=\"values.secondary\" color=\"secondary\"></mat-progress-bar>\n  </div>\n\n</ng-container>\n\n<ng-template #loadingTemplate>\n  <mat-spinner></mat-spinner>\n</ng-template>\n"
        },
        {
            "name": "PureComponentComponent",
            "id": "component-PureComponentComponent-0a8d1af4044326757938bd61f2695f35",
            "file": "src/app/shared/components/pure-component/pure-component.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-component",
            "styleUrls": [
                "./pure-component.component.scss"
            ],
            "styles": [],
            "template": "<div>open: {{ open }}</div>\n<div>count: {{ count }}</div>\n\n<button (click)=\"triggerOutput()\">Trigger output</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerOutput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-pure-component',\n  template: `\n    <div>open: {{ open }}</div>\n    <div>count: {{ count }}</div>\n\n    <button (click)=\"triggerOutput()\">Trigger output</button>\n  `,\n  styleUrls: ['./pure-component.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PureComponentComponent implements OnInit {\n  @Input()\n  open = false;\n\n  count = 0;\n\n  @Output()\n  buttonClicked = new EventEmitter<number>();\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    setInterval(() => {\n      this.count += 1;\n      // this.changeDetectorRef.markForCheck();\n    }, 100);\n  }\n\n  triggerOutput(): void {\n    this.buttonClicked.emit(this.count);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  // display: block;\n}\n",
                    "styleUrl": "./pure-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "RecursiveComponent",
            "id": "component-RecursiveComponent-ced4884a9e85895ec1af536dd5c5e541",
            "file": "src/app/shared/components/recursive/recursive.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recursive",
            "styleUrls": [
                "./recursive.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recursive.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Node"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n} from '@angular/core';\n\nexport interface Node {\n  id: string;\n  children: Node[];\n}\n\n@Component({\n  selector: 'app-recursive',\n  templateUrl: './recursive.component.html',\n  styleUrls: ['./recursive.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecursiveComponent {\n  @Input()\n  node!: Node;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  border-left: 20px solid red;\n}\n",
                    "styleUrl": "./recursive.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>ID: {{node.id}}</div>\n\n<app-recursive *ngFor=\"let child of node.children\"\n               [node]=\"child\"></app-recursive>\n"
        },
        {
            "name": "TableReportComponent",
            "id": "component-TableReportComponent-4c181561bbbdee3989e3cfb1b233f047",
            "file": "src/app/features/dashboard/components/table-report/table-report.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-report",
            "styleUrls": [
                "./table-report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'rating', 'bool']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<TableData>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableData[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { finalize } from 'rxjs/operators';\nimport {\n  ReportsService,\n  TableData,\n} from 'src/app/shared/services/reports.service';\n\n@Component({\n  selector: 'app-table-report',\n  templateUrl: './table-report.component.html',\n  styleUrls: ['./table-report.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableReportComponent implements OnInit {\n  loading = false;\n  values: TableData[] = [];\n\n  displayedColumns: Array<keyof TableData> = ['name', 'rating', 'bool'];\n  constructor(\n    private reportsService: ReportsService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.reportsService\n      .getTableData()\n      .pipe(\n        finalize(() => {\n          this.loading = false;\n        })\n      )\n      .subscribe({\n        next: (values) => {\n          this.values = values;\n          this.changeDetectorRef.markForCheck();\n        },\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-report.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reportsService",
                        "type": "ReportsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "reportsService",
                        "type": "ReportsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<table mat-table [dataSource]=\"values\" class=\"mat-elevation-z8\" *ngIf=\"!loading && values; else loadingTemplate\">\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n  </ng-container>\n\n  <!-- Weight Column -->\n  <ng-container matColumnDef=\"rating\">\n    <th mat-header-cell *matHeaderCellDef> Rating </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.rating}} </td>\n  </ng-container>\n\n  <!-- Symbol Column -->\n  <ng-container matColumnDef=\"bool\">\n    <th mat-header-cell *matHeaderCellDef> Bool </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.bool}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n\n\n<ng-template #loadingTemplate>\n  <mat-spinner mode='indeterminate'></mat-spinner>\n</ng-template>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-66a79b7d88875b6a69eebccda96e4ff0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatFormFieldDefaultOptions,\n  MAT_FORM_FIELD_DEFAULT_OPTIONS,\n} from '@angular/material/form-field';\n\nexport const formFieldOptions: MatFormFieldDefaultOptions = {\n  appearance: 'fill',\n};\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, BrowserAnimationsModule],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: formFieldOptions,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-6328e1702e4c0ec50f4a3000c30bd3df",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuardService } from './shared/guard/auth-guard.service';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    loadChildren: () =>\n      \"import('./features/login/login.module').then((m) => m.LoginModule)\",\n  },\n  {\n    path: '',\n    canActivate: [AuthGuardService],\n    children: [\n      {\n        path: '',\n        loadChildren: () =>\n          \"import('./features/layout/layout.module').then((m) => m.LayoutModule)\",\n      },\n    ],\n  },\n  {\n    path: '**',\n    loadChildren: () =>\n      \"import('./features/not-found/not-found.module').then(\\\n        (m) => m.NotFoundModule\\\n      )\",\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigurableModule",
            "id": "module-ConfigurableModule-2a7e11b33b1b5d06b8d877d8dd3e0d82",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/components/configurable/configurable.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "ComponentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ConfigurableModule>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ComponentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConfigurableComponent } from './configurable/configurable.component';\nimport {\n  CONFIG_TOKEN,\n  DEFAULT_CONFIG,\n  ComponentConfig,\n} from './configuration.const';\n\n@NgModule({\n  declarations: [ConfigurableComponent],\n  imports: [CommonModule],\n  exports: [ConfigurableComponent],\n  providers: [\n    {\n      provide: CONFIG_TOKEN,\n      useValue: DEFAULT_CONFIG,\n    },\n  ],\n})\nexport class ConfigurableModule {\n  public static forRoot(\n    config: ComponentConfig\n  ): ModuleWithProviders<ConfigurableModule> {\n    return {\n      ngModule: ConfigurableModule,\n      providers: [\n        {\n          provide: CONFIG_TOKEN,\n          useValue: config,\n        },\n      ],\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfigurableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfigurableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-191c25f12091ce3eaf8c9bd15960a154",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { TableReportComponent } from './components/table-report/table-report.component';\nimport { ProgressReportComponent } from './components/progress-report/progress-report.component';\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n  declarations: [\n    DashboardComponent,\n    TableReportComponent,\n    ProgressReportComponent,\n  ],\n  imports: [SharedModule, DashboardRoutingModule],\n})\nexport class DashboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "ProgressReportComponent"
                        },
                        {
                            "name": "TableReportComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-2b68b5d835f1f9a834887aa6dfa95f0f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\n\nconst routes: Routes = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-b59b6e09cf80526e5a2c9fe511c8abfe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { LayoutRoutingModule } from './layout-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n  declarations: [LayoutComponent],\n  imports: [SharedModule, LayoutRoutingModule],\n})\nexport class LayoutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LayoutRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutRoutingModule",
            "id": "module-LayoutRoutingModule-1085453fd453153f2c37915377940bb2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/layout/layout-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LayoutComponent } from './layout.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LayoutComponent,\n    children: [\n      {\n        path: '',\n        loadChildren: () =>\n          \"import('../dashboard/dashboard.module').then(\\\n            (m) => m.DashboardModule\\\n          )\",\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LayoutRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-2f51905ca4612bfe3f6ef7cce4643ccd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  declarations: [LoginPageComponent, LoginFormComponent],\n  imports: [CommonModule, LoginRoutingModule, SharedModule],\n})\nexport class LoginModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "id": "module-LoginRoutingModule-b58ec79a2cb13b8ab92fc24caca01572",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/login/login-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPageComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundModule",
            "id": "module-NotFoundModule-6f5e97fb24932b62081599e7f6dc3674",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/not-found/not-found.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NotFoundRoutingModule } from './not-found-routing.module';\nimport { NotFoundComponent } from './not-found.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n  declarations: [NotFoundComponent],\n  imports: [SharedModule, NotFoundRoutingModule],\n})\nexport class NotFoundModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NotFoundRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundRoutingModule",
            "id": "module-NotFoundRoutingModule-2beb4995cc573b03a7cf4b4bc1069072",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/not-found/not-found-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NotFoundComponent } from './not-found.component';\n\nconst routes: Routes = [{ path: '', component: NotFoundComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NotFoundRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-7689f2f6dbf463e82743f86c5ea15492",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RecursiveComponent } from './components/recursive/recursive.component';\nimport { PureComponentComponent } from './components/pure-component/pure-component.component';\nimport { PostComponent } from './components/post/post.component';\nimport { NgContentSimpleComponent } from './components/ng-content-simple/ng-content-simple.component';\nimport { NgContentSelectComponent } from './components/ng-content-select/ng-content-select.component';\nimport { DynamicComponent } from './components/dynamic/dynamic.component';\nimport { CustomTemplateComponent } from './components/custom-template/custom-template.component';\nimport { ContentTriggerComponent } from './components/content-trigger/content-trigger.component';\nimport { ContentTriggerDirective } from './components/content-trigger/content-trigger.directive';\n\nconst sharedModules = [\n  CommonModule,\n  MatButtonModule,\n  MatRadioModule,\n  MatCheckboxModule,\n  MatDialogModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatInputModule,\n  MatMenuModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatTableModule,\n  MatTooltipModule,\n  FormsModule,\n  ReactiveFormsModule,\n];\n\nexport const sharedComponents = [\n  RecursiveComponent,\n  PureComponentComponent,\n  PostComponent,\n  NgContentSimpleComponent,\n  NgContentSelectComponent,\n  DynamicComponent,\n  CustomTemplateComponent,\n  ContentTriggerComponent,\n  ContentTriggerDirective,\n];\n\n@NgModule({\n  declarations: [...sharedComponents],\n  imports: [...sharedModules],\n  exports: [...sharedModules, ...sharedComponents],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ContentTriggerComponent"
                        },
                        {
                            "name": "ContentTriggerDirective"
                        },
                        {
                            "name": "CustomTemplateComponent"
                        },
                        {
                            "name": "DynamicComponent"
                        },
                        {
                            "name": "NgContentSelectComponent"
                        },
                        {
                            "name": "NgContentSimpleComponent"
                        },
                        {
                            "name": "PostComponent"
                        },
                        {
                            "name": "PureComponentComponent"
                        },
                        {
                            "name": "RecursiveComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContentTriggerComponent"
                        },
                        {
                            "name": "ContentTriggerDirective"
                        },
                        {
                            "name": "CustomTemplateComponent"
                        },
                        {
                            "name": "DynamicComponent"
                        },
                        {
                            "name": "NgContentSelectComponent"
                        },
                        {
                            "name": "NgContentSimpleComponent"
                        },
                        {
                            "name": "PostComponent"
                        },
                        {
                            "name": "PureComponentComponent"
                        },
                        {
                            "name": "RecursiveComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "accounts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<string, User>",
                "defaultValue": "{\n  'alan.sa@mjv.com.br': {\n    email: 'alan.sa@mjv.com.br',\n    name: 'Alan Jhonnes',\n    dashboardSetting: ['progress', 'progress', 'table'],\n  },\n  'nathan.carlos@mjv.com.br': {\n    email: 'nathan.carlos@mjv.com.br',\n    name: 'Nathan Carlos',\n    dashboardSetting: ['table', 'table', 'progress'],\n  },\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/content-trigger/content-trigger.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/dynamic/dynamic.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/ng-content-select/ng-content-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/custom-template/custom-template.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/ng-content-simple/ng-content-simple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/post/post.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/pure-component/pure-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/recursive/recursive.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/configurable/configurable/configurable.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CONFIG_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/configurable/configuration.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ComponentConfig>(\n  'component_config'\n)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/login/components/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "DEFAULT_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/configurable/configuration.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ComponentConfig",
                "defaultValue": "{\n  color: 'red',\n  backgroundColor: 'black',\n  borderRadius: '1rem',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "formFieldOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatFormFieldDefaultOptions",
                "defaultValue": "{\n  appearance: 'fill',\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MixedBasePostComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/post/post.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mixinClappable(mixinLikeable(PostComponentBase))"
            },
            {
                "name": "node",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/recursive/recursive.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Node",
                "defaultValue": "{\n  id: '1',\n  children: [\n    {\n      id: '2',\n      children: [\n        {\n          id: '3',\n          children: [\n            {\n              id: '4',\n              children: [],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '5',\n      children: [\n        {\n          id: '6',\n          children: [],\n        },\n      ],\n    },\n  ],\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "progressData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/reports.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ProgressData",
                "defaultValue": "{\n  primary: 100,\n  secondary: 50,\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "sharedComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  RecursiveComponent,\n  PureComponentComponent,\n  PostComponent,\n  NgContentSimpleComponent,\n  NgContentSelectComponent,\n  DynamicComponent,\n  CustomTemplateComponent,\n  ContentTriggerComponent,\n  ContentTriggerDirective,\n]"
            },
            {
                "name": "sharedModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  CommonModule,\n  MatButtonModule,\n  MatRadioModule,\n  MatCheckboxModule,\n  MatDialogModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatInputModule,\n  MatMenuModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatTableModule,\n  MatTooltipModule,\n  FormsModule,\n  ReactiveFormsModule,\n]"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "tableData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/reports.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TableData[]",
                "defaultValue": "[\n  {\n    bool: true,\n    name: 'Alan',\n    rating: 5,\n  },\n  {\n    bool: true,\n    name: 'Nathan',\n    rating: 6,\n  },\n  {\n    bool: true,\n    name: 'Carlos',\n    rating: 7,\n  },\n]"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/login/components/login-form/login-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginFormComponent>",
                "defaultValue": "(args: LoginFormComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [LoginModule, SharedModule],\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/content-trigger/content-trigger.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ContentTriggerComponent>",
                "defaultValue": "(\n  args: ContentTriggerComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<app-content-trigger>\n  <button app-content-trigger [customData]=\"{ prop: 'some data' }\"> MY CUSTOM BUTTON</button>\n</app-content-trigger>\n`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/dynamic/dynamic.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DynamicComponent>",
                "defaultValue": "(args: DynamicComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<div>DYNAMIC COMPONENTS</div>\n<app-dynamic>\n</app-dynamic>\n`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/ng-content-select/ng-content-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NgContentSelectComponent>",
                "defaultValue": "(\n  args: NgContentSelectComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<app-ng-content-select>\n  <div top-left>TOP LEFT</div>\n  <div top-right>TOP RIGHT</div>\n  <div bottom-left>BOTTOM LEFT</div>\n  <app-pure-component bottom-right></app-pure-component>\n</app-ng-content-select>\n`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/custom-template/custom-template.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CustomTemplateComponent>",
                "defaultValue": "(\n  args: CustomTemplateComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n  <app-custom-template\n  [title]=\"title\"\n  [subtitle]=\"subtitle\"\n  [template]=\"customTemplate\"\n>\n</app-custom-template>\n\n<ng-template #customTemplate\n  let-default\n  let-title=\"title\"\n  let-subtitle=\"subtitle\">\n  <h5>CUSTOM TEMPLATE</h5>\n\n  <p style=\"color: blue\">{{title}}</p>\n  <p style=\"color: red\">{{subtitle}}</p>\n  <p style=\"color: green\">{{default}}</p>\n</ng-template>\n`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/ng-content-simple/ng-content-simple.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NgContentSimpleComponent>",
                "defaultValue": "(\n  args: NgContentSimpleComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<app-ng-content-simple>\n  <h1>My content</h1>\n  <app-pure-component></app-pure-component>\n</app-ng-content-simple>\n`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/post/post.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostComponent>",
                "defaultValue": "(args: PostComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  //   template: `\n  //   <app-post\n  //   [entityId]=\"entityId\"\n  //   [content]=\"content\"\n  //   [isLiked]=\"isLiked\"\n  //   [isClapped]=\"isClapped\"\n  //   [likes]=\"likes\"\n  //   [claps]=\"claps\"\n  //   (like)=\"like($event)\"\n  //   (unlike)=\"unlike($event)\"\n  //   (clap)=\"clap($event)\"\n  // ></app-post>\n  // `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/pure-component/pure-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PureComponentComponent>",
                "defaultValue": "(\n  args: PureComponentComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/recursive/recursive.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RecursiveComponent>",
                "defaultValue": "(args: RecursiveComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n  <app-recursive [node]=\"node\">\n  </app-recursive>\n`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/configurable/configurable/configurable.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ConfigurableComponent>",
                "defaultValue": "(\n  args: ConfigurableComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [ConfigurableModule],\n    providers: [\n      {\n        provide: CONFIG_TOKEN,\n        useValue: {\n          backgroundColor: 'blue',\n          borderRadius: '40px',\n          color: 'white',\n        } as ComponentConfig,\n      },\n    ],\n  },\n  template: `\n  <app-configurable></app-configurable>\n  `,\n})"
            },
            {
                "name": "widgetTypeToWidgetComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/dashboard/services/widget.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<WidgetTypes, Constructor<WidgetType>>",
                "defaultValue": "{\n  progress: ProgressReportComponent,\n  table: TableReportComponent,\n}"
            }
        ],
        "functions": [
            {
                "name": "mixinClappable",
                "file": "src/app/shared/mixins/clappable.mixin.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "base",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinLikeable",
                "file": "src/app/shared/mixins/likeable.mixin.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "base",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ClappableConstructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<Clappable>",
                "file": "src/app/shared/mixins/clappable.mixin.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 174
            },
            {
                "name": "Constructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/mixins/constructor.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 176
            },
            {
                "name": "LikeableConstructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<Likeable>",
                "file": "src/app/shared/mixins/likeable.mixin.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 174
            },
            {
                "name": "LogInResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogInSuccessResponse | LogInErrorResponse",
                "file": "src/app/shared/services/auth.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "WidgetType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TableReportComponent | ProgressReportComponent",
                "file": "src/app/features/dashboard/widget.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "WidgetTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"table\" | \"progress\"",
                "file": "src/app/shared/types/user.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/shared/services/auth.service.ts": [
                {
                    "name": "accounts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, User>",
                    "defaultValue": "{\n  'alan.sa@mjv.com.br': {\n    email: 'alan.sa@mjv.com.br',\n    name: 'Alan Jhonnes',\n    dashboardSetting: ['progress', 'progress', 'table'],\n  },\n  'nathan.carlos@mjv.com.br': {\n    email: 'nathan.carlos@mjv.com.br',\n    name: 'Nathan Carlos',\n    dashboardSetting: ['table', 'table', 'progress'],\n  },\n}"
                }
            ],
            "src/app/shared/components/content-trigger/content-trigger.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/content-trigger/content-trigger.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/content-trigger/content-trigger.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ContentTriggerComponent>",
                    "defaultValue": "(\n  args: ContentTriggerComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<app-content-trigger>\n  <button app-content-trigger [customData]=\"{ prop: 'some data' }\"> MY CUSTOM BUTTON</button>\n</app-content-trigger>\n`,\n})"
                }
            ],
            "src/app/shared/components/dynamic/dynamic.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/dynamic/dynamic.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/dynamic/dynamic.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DynamicComponent>",
                    "defaultValue": "(args: DynamicComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<div>DYNAMIC COMPONENTS</div>\n<app-dynamic>\n</app-dynamic>\n`,\n})"
                }
            ],
            "src/app/shared/components/ng-content-select/ng-content-select.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/ng-content-select/ng-content-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/ng-content-select/ng-content-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NgContentSelectComponent>",
                    "defaultValue": "(\n  args: NgContentSelectComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<app-ng-content-select>\n  <div top-left>TOP LEFT</div>\n  <div top-right>TOP RIGHT</div>\n  <div bottom-left>BOTTOM LEFT</div>\n  <app-pure-component bottom-right></app-pure-component>\n</app-ng-content-select>\n`,\n})"
                }
            ],
            "src/app/shared/components/custom-template/custom-template.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/custom-template/custom-template.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/custom-template/custom-template.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CustomTemplateComponent>",
                    "defaultValue": "(\n  args: CustomTemplateComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n  <app-custom-template\n  [title]=\"title\"\n  [subtitle]=\"subtitle\"\n  [template]=\"customTemplate\"\n>\n</app-custom-template>\n\n<ng-template #customTemplate\n  let-default\n  let-title=\"title\"\n  let-subtitle=\"subtitle\">\n  <h5>CUSTOM TEMPLATE</h5>\n\n  <p style=\"color: blue\">{{title}}</p>\n  <p style=\"color: red\">{{subtitle}}</p>\n  <p style=\"color: green\">{{default}}</p>\n</ng-template>\n`,\n})"
                }
            ],
            "src/app/shared/components/ng-content-simple/ng-content-simple.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/ng-content-simple/ng-content-simple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/ng-content-simple/ng-content-simple.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NgContentSimpleComponent>",
                    "defaultValue": "(\n  args: NgContentSimpleComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n<app-ng-content-simple>\n  <h1>My content</h1>\n  <app-pure-component></app-pure-component>\n</app-ng-content-simple>\n`,\n})"
                }
            ],
            "src/app/shared/components/post/post.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/post/post.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/post/post.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostComponent>",
                    "defaultValue": "(args: PostComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  //   template: `\n  //   <app-post\n  //   [entityId]=\"entityId\"\n  //   [content]=\"content\"\n  //   [isLiked]=\"isLiked\"\n  //   [isClapped]=\"isClapped\"\n  //   [likes]=\"likes\"\n  //   [claps]=\"claps\"\n  //   (like)=\"like($event)\"\n  //   (unlike)=\"unlike($event)\"\n  //   (clap)=\"clap($event)\"\n  // ></app-post>\n  // `,\n})"
                }
            ],
            "src/app/shared/components/pure-component/pure-component.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/pure-component/pure-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/pure-component/pure-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PureComponentComponent>",
                    "defaultValue": "(\n  args: PureComponentComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n})"
                }
            ],
            "src/app/shared/components/recursive/recursive.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/recursive/recursive.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "node",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/recursive/recursive.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Node",
                    "defaultValue": "{\n  id: '1',\n  children: [\n    {\n      id: '2',\n      children: [\n        {\n          id: '3',\n          children: [\n            {\n              id: '4',\n              children: [],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '5',\n      children: [\n        {\n          id: '6',\n          children: [],\n        },\n      ],\n    },\n  ],\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/recursive/recursive.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RecursiveComponent>",
                    "defaultValue": "(args: RecursiveComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [SharedModule],\n  },\n  template: `\n  <app-recursive [node]=\"node\">\n  </app-recursive>\n`,\n})"
                }
            ],
            "src/app/shared/components/configurable/configurable/configurable.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/configurable/configurable/configurable.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/configurable/configurable/configurable.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ConfigurableComponent>",
                    "defaultValue": "(\n  args: ConfigurableComponent\n) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [ConfigurableModule],\n    providers: [\n      {\n        provide: CONFIG_TOKEN,\n        useValue: {\n          backgroundColor: 'blue',\n          borderRadius: '40px',\n          color: 'white',\n        } as ComponentConfig,\n      },\n    ],\n  },\n  template: `\n  <app-configurable></app-configurable>\n  `,\n})"
                }
            ],
            "src/app/shared/components/configurable/configuration.const.ts": [
                {
                    "name": "CONFIG_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/configurable/configuration.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ComponentConfig>(\n  'component_config'\n)"
                },
                {
                    "name": "DEFAULT_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/configurable/configuration.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentConfig",
                    "defaultValue": "{\n  color: 'red',\n  backgroundColor: 'black',\n  borderRadius: '1rem',\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/features/login/components/login-form/login-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/login/components/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/login/components/login-form/login-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginFormComponent>",
                    "defaultValue": "(args: LoginFormComponent) => ({\n  props: args,\n  moduleMetadata: {\n    imports: [LoginModule, SharedModule],\n  },\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "formFieldOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormFieldDefaultOptions",
                    "defaultValue": "{\n  appearance: 'fill',\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/app/shared/components/post/post.component.ts": [
                {
                    "name": "MixedBasePostComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/post/post.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mixinClappable(mixinLikeable(PostComponentBase))"
                }
            ],
            "src/app/shared/services/reports.service.ts": [
                {
                    "name": "progressData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/reports.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressData",
                    "defaultValue": "{\n  primary: 100,\n  secondary: 50,\n}"
                },
                {
                    "name": "tableData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/reports.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableData[]",
                    "defaultValue": "[\n  {\n    bool: true,\n    name: 'Alan',\n    rating: 5,\n  },\n  {\n    bool: true,\n    name: 'Nathan',\n    rating: 6,\n  },\n  {\n    bool: true,\n    name: 'Carlos',\n    rating: 7,\n  },\n]"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "sharedComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  RecursiveComponent,\n  PureComponentComponent,\n  PostComponent,\n  NgContentSimpleComponent,\n  NgContentSelectComponent,\n  DynamicComponent,\n  CustomTemplateComponent,\n  ContentTriggerComponent,\n  ContentTriggerDirective,\n]"
                },
                {
                    "name": "sharedModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  CommonModule,\n  MatButtonModule,\n  MatRadioModule,\n  MatCheckboxModule,\n  MatDialogModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatInputModule,\n  MatMenuModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatTableModule,\n  MatTooltipModule,\n  FormsModule,\n  ReactiveFormsModule,\n]"
                }
            ],
            "src/app/features/dashboard/services/widget.service.ts": [
                {
                    "name": "widgetTypeToWidgetComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/dashboard/services/widget.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<WidgetTypes, Constructor<WidgetType>>",
                    "defaultValue": "{\n  progress: ProgressReportComponent,\n  table: TableReportComponent,\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/mixins/clappable.mixin.ts": [
                {
                    "name": "mixinClappable",
                    "file": "src/app/shared/mixins/clappable.mixin.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "base",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/mixins/likeable.mixin.ts": [
                {
                    "name": "mixinLikeable",
                    "file": "src/app/shared/mixins/likeable.mixin.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "base",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/mixins/clappable.mixin.ts": [
                {
                    "name": "ClappableConstructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<Clappable>",
                    "file": "src/app/shared/mixins/clappable.mixin.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 174
                }
            ],
            "src/app/shared/mixins/constructor.type.ts": [
                {
                    "name": "Constructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/mixins/constructor.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 176
                }
            ],
            "src/app/shared/mixins/likeable.mixin.ts": [
                {
                    "name": "LikeableConstructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<Likeable>",
                    "file": "src/app/shared/mixins/likeable.mixin.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 174
                }
            ],
            "src/app/shared/services/auth.types.ts": [
                {
                    "name": "LogInResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogInSuccessResponse | LogInErrorResponse",
                    "file": "src/app/shared/services/auth.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/features/dashboard/widget.type.ts": [
                {
                    "name": "WidgetType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TableReportComponent | ProgressReportComponent",
                    "file": "src/app/features/dashboard/widget.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/types/user.type.ts": [
                {
                    "name": "WidgetTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"table\" | \"progress\"",
                    "file": "src/app/shared/types/user.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "loadChildren": "./features/login/login.module#LoginModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/features/login/login-routing.module.ts",
                                        "module": "LoginRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LoginPageComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "LoginModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "canActivate": [
                            "AuthGuardService"
                        ],
                        "children": [
                            {
                                "path": "",
                                "loadChildren": "./features/layout/layout.module#LayoutModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/features/layout/layout-routing.module.ts",
                                                "module": "LayoutRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "LayoutComponent",
                                                        "children": [
                                                            {
                                                                "path": "",
                                                                "loadChildren": "../dashboard/dashboard.module#DashboardModule",
                                                                "children": [
                                                                    {
                                                                        "kind": "module",
                                                                        "children": [
                                                                            {
                                                                                "name": "routes",
                                                                                "filename": "src/app/features/dashboard/dashboard-routing.module.ts",
                                                                                "module": "DashboardRoutingModule",
                                                                                "children": [
                                                                                    {
                                                                                        "path": "",
                                                                                        "component": "DashboardComponent"
                                                                                    }
                                                                                ],
                                                                                "kind": "module"
                                                                            }
                                                                        ],
                                                                        "module": "DashboardModule"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "LayoutModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "loadChildren": "./features/not-found/not-found.module#NotFoundModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/features/not-found/not-found-routing.module.ts",
                                        "module": "NotFoundRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "NotFoundComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "NotFoundModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/progress-report/progress-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/table-report/table-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/pages/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/services/widget.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WidgetService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/services/widget.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "widgetTypeToWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/login/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/login/components/login-form/login-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/login/components/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/login/components/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/login/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/configurable/configurable/configurable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfigurableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/configurable/configurable/configurable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/configurable/configurable/configurable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/configurable/configuration.const.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/configurable/configuration.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFIG_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/configurable/configuration.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/content-trigger/content-trigger.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentTriggerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/content-trigger/content-trigger.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ContentTriggerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/content-trigger/content-trigger.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/content-trigger/content-trigger.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/custom-template/custom-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/custom-template/custom-template.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TemplateContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/custom-template/custom-template.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/custom-template/custom-template.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dynamic/dynamic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dynamic/dynamic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dynamic/dynamic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/ng-content-select/ng-content-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgContentSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/ng-content-select/ng-content-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/ng-content-select/ng-content-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/ng-content-simple/ng-content-simple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgContentSimpleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/ng-content-simple/ng-content-simple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/ng-content-simple/ng-content-simple.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post/post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post/post.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PostComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post/post.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MixedBasePostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post/post.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post/post.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pure-component/pure-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pure-component/pure-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pure-component/pure-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/recursive/recursive.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecursiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/recursive/recursive.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Node",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/recursive/recursive.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/recursive/recursive.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/recursive/recursive.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guard/auth-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mixins/clappable.mixin.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Clappable",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mixins/clappable.mixin.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mixinClappable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mixins/has-entity-id.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HasEntityId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mixins/likeable.mixin.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Likeable",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/mixins/likeable.mixin.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mixinLikeable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogInInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accounts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseLogInResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogInErrorResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LogInSuccessResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/reports.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReportsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/reports.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProgressData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/reports.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/reports.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "progressData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/reports.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sharedComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sharedModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/user.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}